<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://reflection.cf/feed.xml" rel="self" type="application/atom+xml" /><link href="https://reflection.cf/" rel="alternate" type="text/html" /><updated>2022-11-18T09:36:34+00:00</updated><id>https://reflection.cf/feed.xml</id><title type="html">Shubham’s Digital Garden🪴</title><subtitle>Shubham's Digital Garden.</subtitle><author><name>Shubham</name></author><entry><title type="html">Red, Blue and Purple Teams in Cyber Security</title><link href="https://reflection.cf/2022/11/18/sec-rbp-teams.html" rel="alternate" type="text/html" title="Red, Blue and Purple Teams in Cyber Security" /><published>2022-11-18T00:00:00+00:00</published><updated>2022-11-18T00:00:00+00:00</updated><id>https://reflection.cf/2022/11/18/sec-rbp-teams</id><content type="html" xml:base="https://reflection.cf/2022/11/18/sec-rbp-teams.html"><![CDATA[<p>A red team exists to attack. A blue team to defend. A purple team is optionally set up to support the process.
The overall objective is to strengthen an organization’s security by learning from the ensuing combat.</p>

<p><img src="/assets/images/sec-rbp/teams.jpg" alt="Red, Blue and Purple Teams" /></p>

<h2 id="what-is-a-red-team-in-cyber-security">What is a Red Team in cyber security?</h2>
<p>A red team exists to attack, it usually operates independently of a target organization. A red team is usually hired covertly to test defenses.
The core objective of this team is to identify and safely exploit vulnerabilities. They usually mimic sophisticated real-world threats.
The attack process is highly realistic. A red team uses bleeding-edge hacking tools and techniques to infiltrate the target.
This also includes writing their malware and devising new methods similar to malicious hackers.</p>

<p>Traditional pen-testers deploy loud (easily detectable) techniques, like vulnerability scanners to identify gaps in security.
In contrast, a red team is stealthy and will do everything it can to avoid detection. Red Team only needs to find the weakest link to break
target perimeters wide open. In a red team engagement, everything is allowed from spear-phishing to disguising as a delivery driver and entering
the target premise to discreetly insert a USB drive into unsuspecting employee devices.</p>

<h3 id="red-team-objectives">Red Team Objectives</h3>
<ul>
  <li>Compromising target’s security by extracting info, infiltrating systems or breaching physical perimeters</li>
  <li>Avoiding detection by Blue Team</li>
  <li>Exploiting bugs and weaknesses in the target’s infrastructure</li>
  <li>Initiating hostile activities</li>
</ul>

<h3 id="red-team-methods">Red Team Methods</h3>
<ul>
  <li>Initial reconnaissance - open source intelligence(OSINT)</li>
  <li>Deploying command-and-control servers(C&amp;C OR C2) inside target’s network</li>
  <li>Using decoys to throw off blue team</li>
  <li>Social engineering and phishing techniques</li>
  <li>Physical and Digital pen-testing</li>
</ul>

<h2 id="what-is-a-blue-team-in-cyber-security">What is a Blue Team in cyber security?</h2>
<p>A blue team is an organization’s own cybersecurity personnel, typically within a Security Operations Centre(SOC).
The SOC consists of highly trained analysts who work on defending and improving their organization’s defenses around the clock.
The blue team is expected to detect, oppose and weaken the red team. They enhance their skills by going through mock attack scenarios.</p>

<p>Most modern threats like malware and phishing emails are stopped by automated tools on the network’s perimeter.
The blue team adds human intelligence to existing tools and technologies. Blue team also works in both proactive and reactive modes.
The blue team will detect, identify and neutralize more sophisticated attacks preemptively.</p>

<h3 id="blue-team-objectives">Blue Team Objectives</h3>
<ul>
  <li>Understand incidents and respond accordingly</li>
  <li>Identify suspicious activity</li>
  <li>Shutdown any form of compromise</li>
  <li>Identify red team command and control (C&amp;C or C2) servers and block their connectivity to the target</li>
  <li>Undertake analysis and forensic testing for their organization</li>
</ul>

<h3 id="blue-team-methods">Blue Team Methods</h3>
<ul>
  <li>Log data review and analysis</li>
  <li>Using security information and event management (SIEM) platform for visibility and detection of live intrusions and to triage alarms in real-time</li>
  <li>Gathering new threat intelligence information and prioritizing appropriate actions to mitigate risks</li>
  <li>Performing traffic and data flow analysis</li>
</ul>

<h2 id="what-is-a-purple-team-in-cyber-security">What is a Purple Team in cyber security?</h2>
<p>A purple team is not permanent, it has a transient function to oversee and optimize the red and blue team exercise.
If the red and blue teams work well, a purple team may become redundant. Red and Blue teams usually have friction giving rise to the need of purple team.
Purple teams are more a concept than a function, driving the red team to test and target specific elements of the blue team’s defence and detection
capabilities.</p>

<h3 id="purple-team-objectives">Purple Team Objectives</h3>
<ul>
  <li>Work alongside both the red and blue team</li>
  <li>Analyze and recommend necessary adjustments to both teams</li>
  <li>Taking responsibility for both teams and having a big picture</li>
  <li>Analyzing results and overseeing necessary remedial actions</li>
</ul>

<p>The following matrix should help clarify the differences between different teams.</p>

<p><img src="/assets/images/sec-rbp/difference.png" alt="Team difference matrix" /></p>]]></content><author><name>Shubham</name></author><category term="security" /><summary type="html"><![CDATA[A red team exists to attack. A blue team to defend. A purple team is optionally set up to support the process. The overall objective is to strengthen an organization’s security by learning from the ensuing combat.]]></summary></entry><entry><title type="html">Quick Sort Algorithm</title><link href="https://reflection.cf/2022/10/04/quick-sort.html" rel="alternate" type="text/html" title="Quick Sort Algorithm" /><published>2022-10-04T00:00:00+00:00</published><updated>2022-10-04T00:00:00+00:00</updated><id>https://reflection.cf/2022/10/04/quick-sort</id><content type="html" xml:base="https://reflection.cf/2022/10/04/quick-sort.html"><![CDATA[<p>Quicksort is a divide and conquer algorithm, it picks an element as pivot and partitions the array around pivot. Partitioning can be done in many different ways. The implementation below cover 2 most used partitioning schemes for quick sort - <strong>Hoare</strong> and <strong>Lomuto</strong>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="c1">// quick sort is unstable</span>
<span class="kd">class</span> <span class="nc">QuickSort</span> <span class="o">{</span>
	<span class="kd">enum</span> <span class="nc">PartitionType</span> <span class="o">{</span>
		<span class="nc">Hoare</span><span class="o">,</span>
		<span class="nc">Lomuto</span>
	<span class="o">}</span>

	<span class="c1">// Partition Scheme</span>
	<span class="c1">// should return index of pivot</span>
	<span class="c1">// all values on left of pivot should be smaller than pivot</span>
	<span class="c1">// all values on right of pivot should be greater than pivot</span>
	
	<span class="c1">// There are 2 major partitioning schemes</span>
	<span class="c1">// Hoare and Lomuto</span>
	
	<span class="c1">// Hoare Partition Algorithm</span>
	<span class="c1">// 1. First element is assumed to be the initial pivot(can also choose middle or</span>
	<span class="c1">// last element)</span>
	<span class="c1">// 2. Linear Algorithm</span>
	<span class="c1">// 3. Relatively Faster</span>
	<span class="c1">// 4. Doesn't fix pivot element in the correct position</span>
	<span class="c1">// This function takes last element as pivot</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="nf">partition_hoare</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">low</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">low</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">high</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
		
		<span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// find the left most element &gt;= pivot</span>
			<span class="k">do</span> <span class="o">{</span>
				<span class="n">i</span><span class="o">++;</span>
			<span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="o">);</span>
			
			<span class="c1">// find the right most element &lt;= pivot</span>
			<span class="k">do</span> <span class="o">{</span>
				<span class="n">j</span><span class="o">--;</span>
			<span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">pivot</span><span class="o">);</span>
			
			<span class="c1">// if two pointers met</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="n">j</span><span class="o">)</span>
				<span class="k">return</span> <span class="n">j</span><span class="o">;</span>
			
			<span class="c1">// swap to correct position</span>
			<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
			<span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="c1">// Lomuto Partition Algorithm</span>
	<span class="c1">// 1. Random element is located and picked and then exchanged with the first or</span>
	<span class="c1">// the last element to give initial pivot</span>
	<span class="c1">// 2. Linear Algorithm</span>
	<span class="c1">// 3. Slower</span>
	<span class="c1">// 4. Fixes pivot element in the correct position</span>
	<span class="c1">// This implementation takes last element as pivot</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="nf">partition_lomuto</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">high</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="n">low</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">low</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">high</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
			<span class="c1">// if current element is &lt;= pivot</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">i</span><span class="o">++;</span>
				<span class="c1">// swap to correct position</span>
				<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
				<span class="n">arr</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
		<span class="n">arr</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">high</span><span class="o">];</span>
		<span class="n">arr</span><span class="o">[</span><span class="n">high</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
		<span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">static</span> <span class="kt">void</span> <span class="nf">quickSortRec</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">low</span><span class="o">,</span> <span class="kt">int</span> <span class="n">high</span><span class="o">,</span> <span class="nc">PartitionType</span> <span class="n">partition_scheme</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">high</span> <span class="o">&gt;</span> <span class="n">low</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// partition ensures pivot value is in correct position</span>
			<span class="kt">int</span> <span class="n">pivotIndex</span> <span class="o">=</span> <span class="o">(</span><span class="n">partition_scheme</span> <span class="o">==</span> <span class="nc">PartitionType</span><span class="o">.</span><span class="na">Hoare</span><span class="o">)</span> 
				<span class="o">?</span> <span class="n">partition_hoare</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">high</span><span class="o">)</span> 
				<span class="o">:</span> <span class="n">partition_lomuto</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">high</span><span class="o">);</span>
			<span class="c1">// sort left of pivot</span>
			<span class="n">quickSortRec</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">low</span><span class="o">,</span> <span class="n">pivotIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">partition_scheme</span><span class="o">);</span>
			<span class="c1">// sort right of pivot</span>
			<span class="n">quickSortRec</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span> <span class="n">pivotIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">high</span><span class="o">,</span> <span class="n">partition_scheme</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">static</span> <span class="kt">void</span> <span class="nf">quickSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">quickSortRec</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">PartitionType</span><span class="o">.</span><span class="na">Lomuto</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span><span class="o">[][]</span> <span class="n">numsList</span> <span class="o">=</span> <span class="o">{</span>
			<span class="o">{</span> <span class="mi">55</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">26</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">78</span><span class="o">,</span> <span class="mi">23</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="o">},</span>
			<span class="o">{</span> <span class="mi">1</span> <span class="o">},</span>
			<span class="o">{</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span> <span class="o">},</span>
			<span class="o">{</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span> <span class="o">}</span>
		<span class="o">};</span>
		
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numsList</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">". Before Sorting"</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"   "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">numsList</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
			
			<span class="n">quickSort</span><span class="o">(</span><span class="n">numsList</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"   After Sorting"</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"   "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">numsList</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<h1 id="complexity">Complexity</h1>
<p>Runtime complexity \(O(nlogn)\)</p>

<p>Space complexity \(O(logn)\)</p>]]></content><author><name>Shubham</name></author><category term="algorithm" /><summary type="html"><![CDATA[Quicksort is a divide and conquer algorithm, it picks an element as pivot and partitions the array around pivot. Partitioning can be done in many different ways. The implementation below cover 2 most used partitioning schemes for quick sort - Hoare and Lomuto.]]></summary></entry><entry><title type="html">Kadane’s Algorithm</title><link href="https://reflection.cf/2022/09/16/kadane.html" rel="alternate" type="text/html" title="Kadane’s Algorithm" /><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><id>https://reflection.cf/2022/09/16/kadane</id><content type="html" xml:base="https://reflection.cf/2022/09/16/kadane.html"><![CDATA[<p>This algorithm takes a <strong>dynamic programming</strong> approach to solve the maximum subarray sum problem.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findMaxSumSubArray</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">currentMax</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
		<span class="kt">int</span> <span class="n">globalMax</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span><span class="o">(</span><span class="n">currentMax</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// if sum goes below 0 lets reset</span>
				<span class="n">currentMax</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="c1">// if sum is still positive keep on adding</span>
				<span class="n">currentMax</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span><span class="n">globalMax</span> <span class="o">&lt;</span> <span class="n">currentMax</span><span class="o">)</span> <span class="o">{</span>
				<span class="c1">// if current max exceeds global max, update global max</span>
				<span class="n">globalMax</span> <span class="o">=</span> <span class="n">currentMax</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">globalMax</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Array: "</span> <span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">arr</span><span class="o">));</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Max Subarray sum: "</span> <span class="o">+</span> <span class="n">findMaxSumSubArray</span><span class="o">(</span><span class="n">arr</span><span class="o">));</span> <span class="c1">// 11 = 1 + 7 - 2 - 5 + 10</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h1 id="complexity">Complexity</h1>
<p>Runtime Complexity - \(O(n)\)</p>

<p>Space Complexity - \(O(1)\)</p>]]></content><author><name>Shubham</name></author><category term="algorithm" /><summary type="html"><![CDATA[This algorithm takes a dynamic programming approach to solve the maximum subarray sum problem. ```java import java.util.Arrays;]]></summary></entry><entry><title type="html">Concurrency vs Parallelism</title><link href="https://reflection.cf/2022/09/12/concurrency-parallelism.html" rel="alternate" type="text/html" title="Concurrency vs Parallelism" /><published>2022-09-12T00:00:00+00:00</published><updated>2022-09-12T00:00:00+00:00</updated><id>https://reflection.cf/2022/09/12/concurrency-parallelism</id><content type="html" xml:base="https://reflection.cf/2022/09/12/concurrency-parallelism.html"><![CDATA[<h2 id="serial-execution">Serial Execution</h2>
<p>When programs are serially executed, they are scheduled one at a time on the CPU. Once a task gets completed, the next one gets a chance to run.</p>

<h2 id="concurrency">Concurrency</h2>
<p>A concurrent program is one that can be decomposed into constituent parts and each part can be executed out of order or in partial order without affecting the final outcome.</p>

<p>A system capable of running several distinct programs or more than one independent unit of the same program in overlapping time intervals is called a concurrent system.</p>

<p>A concurrent system can have 2 programs in progress at the same time where progress doesn’t imply execution. One program can be suspended while the other executes. Both programs are able to make progress as their execution is interleaved.</p>

<p>In concurrent systems, the goal is to maximize throughput and minimize latency.</p>

<h2 id="parallelism">Parallelism</h2>
<p>A parallel system is one which necessarily has the ability to execute multiple programs at the same time. Usually, this capability is aided by hardware in the form of multicore processors on individual machines or as computing clusters where several machines are hooked up to solve independent pieces of a problem simultaneously.</p>

<p>An individual program has to be concurrent in nature, that is portions of it can be worked on independently without affecting the final outcome before it can be executed in parallel.</p>

<p>In parallel systems the emphasis is on increasing throughput and optimizing usage of hardware resources. The goal is to extract out as much computation speedup as possible.</p>

<h2 id="concurrency-vs-parallelism">Concurrency vs Parallelism</h2>
<p>A concurrent system need not be parallel, whereas a parallel system is indeed concurrent.
A system can be both concurrent and parallel e.g. a multitasking operating system running on a multicore machine.</p>

<p>Concurrency is about dealing with lots of things at once.
Parallelism is about doing lots of things at once.</p>

<p>Concurrency is a property of a program or a system.
Parallelism is a runtime behaviour of executing multiple tasks.</p>

<p><img src="/assets/images/concurrency%20vs%20parallelism.png" alt="Concurrency vs Parallelism" /></p>]]></content><author><name>Shubham</name></author><category term="concurrency" /><category term="parallelism" /><summary type="html"><![CDATA[Serial Execution When programs are serially executed, they are scheduled one at a time on the CPU. Once a task gets completed, the next one gets a chance to run.]]></summary></entry><entry><title type="html">Complexity Analysis</title><link href="https://reflection.cf/2022/09/08/complexity-analysis.html" rel="alternate" type="text/html" title="Complexity Analysis" /><published>2022-09-08T00:00:00+00:00</published><updated>2022-09-08T00:00:00+00:00</updated><id>https://reflection.cf/2022/09/08/complexity-analysis</id><content type="html" xml:base="https://reflection.cf/2022/09/08/complexity-analysis.html"><![CDATA[<p>It is very important to find complexity of algorithms used during software development. A well-written algorithm is not only time-efficient but also space-efficient.</p>

<p>The complexity of algorithms is measured using asymptotic notations. We can determine if an algorithm performs better than another using these notations.</p>

<p>A good software developer should have the ability to calculate the complexity of any algorithm.</p>

<h2 id="introduction-to-asymptotic-analysis-and-big-o">Introduction to Asymptotic Analysis and Big O</h2>
<p>The time complexity of an algorithm can be expressed as a polynomial. We can compare 2 algorithms by comparing the respective polynomials.</p>

<h2 id="asymptotic-analysis">Asymptotic analysis</h2>
<p>The asymptotic notation compares 2 functions say, <em>f(n)</em> and <em>g(n)</em> for very large values of <em>n</em>. This fits in nicely with our need for comparing algorithms for very large input sizes.</p>

<h2 id="big-o-notation">Big O notation</h2>
<p>One of the asymptotic notations is the Big O notation. A function \(f(n)\) is considered \(O(g(n))\) if there exists some positive real constant <strong><em>c</em></strong> and an integer \(n_0 \gt 0\), such that the following inequality holds for all \(n \geq n_0\):
\(f(n) \leq cg(n)\)</p>

<p>The following graph shows a plot of a function \(f(n)\) and \(cg(n)\) that demonstrates this inequality.</p>

<p><img src="/assets/images/complexity-analysis/big-o-graph.png" alt="Big O Graph" /></p>

<p>Note that the above inequality does not have to hold true for all values of n. For \(n \lt n_0\), \(f(n)\) is allowed to exceed \(cg(n)\), but for all values of n beyond some values \(n_0\), \(f(n)\) is not allowed to exceed \(cg(n)\).</p>

<p>It tells us that for very large values of \(n\), \(f(n)\) will be at most within a constant factor of \(g(n)\). In other words, \(f(n)\) will grow no faster than a constant multiple of \(g(n)\). The rate of growth of \(f(n)\) is within constant factors of that of \(g(n)\).</p>

<blockquote>
  <p>People tend to write \(f(n) = O(g(n))\), which isn’t technically accurate. A whole lot of functions can satisfy the \(O(g(n))\) conditions. Therefore, \(O(g(n))\) is a set of functions, and it is okay to say that \(f(n)\) belongs to \(O(g(n))\).</p>
</blockquote>

<h2 id="example">Example</h2>
<p>Let’s consider an algorithm whose running time is given by \(f(n) = 3n^3 + 4n + 2\). Let us try to verify that this algorithm’s time complexity is in \(O(n^3)\). To do this, we need to find a positive constant \(c\) and an integer \(n_0 \ge 0\), such that for all \(n \ge n_0\):</p>

\[3n^3 + 4n + 2 \le cn^3\]

<p>The above inequality would still be true if we re-wrote it while replacing \(cn^3\) with \(3n^3 + 4n^3 + 2n^3\). We have replaced the variable part in all terms with \(n^3\), the variable-part of the highest order term. This gives us:</p>

\[3n^3 + 4n + 2 \le 3n^3 + 4n^3 + 2n^3 = 9n^3\]

<p>This does not violate the inequality because each term on the right-hand side is greater than the corresponding term on the left-hand side. Now, comparing it with the definition of Big O, we can pick c = 9.</p>

<p>That leaves \(n_0\). For what values of n is the inequality \(9n^3 \le cn^3\) satisfied? All of them, actually!
So, we can pick \(n_0 = 1\).</p>

<p>The above solution(\(c = 9, n_0 = 1\)) is not unique. We could have picked any value for \(c\) that exceeds the coefficient of the higher power of \(n\) in \(f(n)\).</p>

<p>It is not possible to find a constant \(c\) and \(n_0\) to show that \(f(n) = 3n^3 + 4n + 2\) is \(O(n^2)\) or \(O(n)\). It is possible to show that \(f(n)\) is \(O(n^4)\) or \(O(n^5)\) or any higher power of \(n\).</p>

<p>It is not really useful to pick higher power.</p>

<p>We are generally interested in the tightest possible bound when it comes to the asymptotic notation.</p>

<h2 id="simplified-asymptotic-analysis">Simplified asymptotic analysis</h2>
<p>We can arrive at the Big O notation for the algorithm simply by:</p>
<ul>
  <li>Dropping the multiplicative constants with all terms</li>
  <li>Dropping all but the highest order term</li>
</ul>

<p>Therefore, \(n^2 + 2n + 1\) is \(O(n^2)\) while \(n^5 + 4n^3 + 2n + 43\) is \(O(n^5)\).</p>

<h2 id="comparison-of-some-common-functions">Comparison of some common functions</h2>
<p><img src="/assets/images/complexity-analysis/asymptotic-notation-comparison.png" alt="Asymptotic Notation Comparison" /></p>

\[c \lt log(n) \lt log^2n \lt \sqrt{n} \lt n \lt nlog(n) \lt n^2 \lt n^3 \lt n^4 \lt 2^n \lt e^n \lt n!\]

<h2 id="useful-formulae">Useful Formulae</h2>
<p>\(\sum_{i=1}^n c = c + c + c + ... + c = cn\)
\(\sum_{i=1}^ni = 1 + 2 + 3 + ... + n = \frac{n(n+1)}{2}\)
\(\sum_{i=1}^ni^2 = 1 + 4 + 9 + ... + n^2 = \frac{n(n+1)(2n+1)}{6}\)
\(\sum_{i=0}^nr^i = r^0 + r^1 + r^2 + ... + r^n = \frac{r^{n+1}-1}{r-1}\)</p>

<h2 id="general-tips">General Tips</h2>
<ol>
  <li>Every time a list or array gets iterated over \(c\) x \(length\) times, it is most likely in \(O(n)\) time.</li>
  <li>When you see a problem where the number of elements in the problem space gets halved each time, it will most probably be in \(O(log(n))\) runtime.</li>
  <li>Whenever you have a single nested loop, the problem is most likely in quadratic time.</li>
</ol>

<h2 id="common-complexity-scenarios">Common Complexity Scenarios</h2>

<h3 id="simple-for-loop-with-an-increment-of-size-1">Simple for-loop with an increment of size 1</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// statement(s) that take constant time</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Running time complexity</strong> = \(T(n)\) = \((2n + 2) + cn\) = \((2 + c)n + 2 \in O(n)\)
Dropping the leading constants =&gt; \((n+2)\)
Dropping lower order terms =&gt; \(O(n)\)</p>

<p><strong>Explanation</strong>
Loop runs for \(0\) till \(n-1\)
<code class="language-plaintext highlighter-rouge">x++</code> runs \(n\) times
<code class="language-plaintext highlighter-rouge">x &lt; n</code> runs \(n + 1\) times
Initialization <code class="language-plaintext highlighter-rouge">x = 0</code> runs once
 Running complexity = \(n + n + 1 + 1 = 2n + 2\)
 Constant time statement run \(n\) times inside loop =&gt; <code class="language-plaintext highlighter-rouge">cn</code>
 Total running time complexity = \((2n+2) + cn \in O(n)\).</p>

<h3 id="for-loop-with-increments-of-size-k">For-loop with increments of size k</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">x</span><span class="o">+=</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">// statement (s) that take constant time</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Running time complexity</strong> = \(2 + n\frac{2 + c}{k} \in O(n)\)</p>

<p><strong>Explanation</strong>
<code class="language-plaintext highlighter-rouge">x = 0</code> runs once
<code class="language-plaintext highlighter-rouge">x</code> gets incremented by <code class="language-plaintext highlighter-rouge">k</code> untile it reaches <code class="language-plaintext highlighter-rouge">n</code>
=&gt; [0, k, 2k, …, (mk) &lt; n]  =&gt; \(floor(\frac{n}{k})\) times
Comparision also takes same time +1 iteration</p>

<p>Total loop = \(1 + 1 + \frac{n}{k} + \frac{n}{k} = 2 + \frac{2n}{k}\) times
Constant time statement takes \(c \times \frac{n}{k}\) time
Total running time complexity = \(2 + \frac{2n}{k} + \frac{cn}{k} = 2 + n(\frac{2+c}{k}) \in O(n)\)</p>

<h3 id="simple-nested-for-loop">Simple nested for-loop</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// statement(s) that take(s) constant time</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Running Time Complexity</strong> =  \(nm(2 + c) + 2 + 4n \in O(nm)\)</p>

<p><strong>Explanation</strong>
Inner loop is a simple for loop that takes \((2m + 2) + cm\) time and the outer loop runs it \(n\) times.
So, it takes \(n((2m + 2) + cm)\) time. Additionally, the initialization, increment and test for the outer loop take \(2n + 2\) time so in total, the running time is
\(n((2m + 2) + cm) + 2n + 2 = 2nm + 4n + cnm + 2 = nm(2 + c) + 4n + 2\), which is \(O(nm)\).</p>

<h3 id="nested-for-loop-with-dependent-variables">Nested for-loop with dependent variables</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// statement(s) that take(s) constant time</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Running Time Complexity</strong> = \(O(n^2)\)</p>

<p><strong>Explanation</strong>
Outer loop runs \(n\) times.
For each outer loop run, inner loop runs \(i\) times.
Inner loop will run for \(i = 0,1,2...(n-1)\) times for constant time statement \(c\).
\(c + 2c + 3c + ... + (n-1)c\) times = \(c(\sum_{i=1}^{n-1}i)\) = \(c\frac{(n - 1)((n - 1) + 1)}{2}\) = \(\frac{cn(n - 1)}{2}\).
The initialization of <code class="language-plaintext highlighter-rouge">j</code> in the inner loop runs once in each iteration of the outer loop.
So, it incurs total running time of \(1 + 2 + ... + n = \frac{n(n + 1)}{2}\).
In each iteration the <code class="language-plaintext highlighter-rouge">j++</code> statement runs one less than the <code class="language-plaintext highlighter-rouge">j &lt; i</code> statement, this account to \(1 + 2 + ... + (n - 1) = \frac{n(n - 1)}{2}\).</p>

<p>So in total, the inner loop has a running time of \(\frac{cn(n - 1)}{2} + \frac{n(n + 1)}{2} + \frac{n(n - 1)}{2} + n\).</p>

<p>The outer loop initialization, test and increment operations account for a running time of \(2n + 2\). That means the entire script has a running time of \(2n + 2 + \frac{cn(n - 1)}{2} + n + \frac{n(n + 1)}{2} + \frac{n(n - 1)}{2}\) which is \(O(n^2)\)</p>

<h3 id="nested-for-loop-with-index-modification">Nested for-loop with index modification</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">i</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// statement(s) that take(s) constant time</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Running Time Complexity</strong> = \(O(n)\)</p>

<p><strong>Explanation</strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Outer Loop</th>
      <th style="text-align: center">Inner Loop</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">i = 0</td>
      <td style="text-align: center">i = 0 * 2 = 0</td>
    </tr>
    <tr>
      <td style="text-align: center">i = 1</td>
      <td style="text-align: center">i = 1 * 2 = 2</td>
    </tr>
    <tr>
      <td style="text-align: center">i = 3</td>
      <td style="text-align: center">i = 3 * 2 = 6</td>
    </tr>
    <tr>
      <td style="text-align: center">…</td>
      <td style="text-align: center">…</td>
    </tr>
    <tr>
      <td style="text-align: center">i = (n - 1)</td>
      <td style="text-align: center">i = (n - 1) * 2 = 2(n - 1)</td>
    </tr>
  </tbody>
</table>

<p>If <code class="language-plaintext highlighter-rouge">i</code> keeps doubling, it will get from 1 to \(n-1\) in roughly \(log_2(n-1)\) steps.
With this simplification, the outer loop index goes approximately 1,2,4,…, \(2^{log_2(n -1 )}\).
Total number of iterations for inner loop is:
\(2^0 + 2^1 + 2^2 + ... + 2^{log_2(n - 1)} = 2^{log_2(n - 1) + 1} - 1 = 2^{log_2(n - 1)}2 - 1 = 2(n - 1) - 1 = 2n - 3\).
Total running time of the inner for loop is \(2(2n - 3) + 2 + c(2n - 3)\) where \(c\) is the running time of the statements in the body of the inner loop. This simplifies to \(2n(2 + c) - 3c - 4\). The contribution from the initialization, test and increment operations of the outer for loop is \(2log_2(n - 1) + 2\). So, the total runtime is \(2n(2 + c) - 3c - 4 + 2log_2(n - 1) + 2\). The term linear in \(n\) dominates the others, and the time complexity is \(O(n)\).</p>

<h3 id="loops-with-logn-time-complexity">Loops with log(n) time complexity</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">i</span> <span class="o">=</span> <span class="c1">// constant</span>
<span class="n">n</span> <span class="o">=</span> <span class="c1">// constant</span>
<span class="n">k</span> <span class="o">=</span> <span class="c1">// constant</span>
<span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">i</span> <span class="o">*=</span> <span class="n">k</span><span class="p">;</span>
	<span class="c1">// statement(s) that take(s) constant time</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Running Time Complexity</strong> = \(\log_k(n) = O(log_k(n))\).</p>

<p><strong>Explanation</strong>
A loop statement that multiplies/divides the loop variable by a constant such as the above takes \(log_k(n)\) time because the loop runs that many times. Let’s consider an example where n = 16, and k = 2:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">i</th>
      <th style="text-align: center">Count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: center">2</td>
    </tr>
    <tr>
      <td style="text-align: center">4</td>
      <td style="text-align: center">3</td>
    </tr>
    <tr>
      <td style="text-align: center">8</td>
      <td style="text-align: center">4</td>
    </tr>
    <tr>
      <td style="text-align: center">16</td>
      <td style="text-align: center">5</td>
    </tr>
  </tbody>
</table>

\[log_k(n) = log_2(16) = 4\]]]></content><author><name>Shubham</name></author><category term="algorithm" /><summary type="html"><![CDATA[It is very important to find complexity of algorithms used during software development. A well-written algorithm is not only time-efficient but also space-efficient.]]></summary></entry><entry><title type="html">Back of the Envelope Estimation</title><link href="https://reflection.cf/2022/06/19/system-design-estimation.html" rel="alternate" type="text/html" title="Back of the Envelope Estimation" /><published>2022-06-19T00:00:00+00:00</published><updated>2022-06-19T00:00:00+00:00</updated><id>https://reflection.cf/2022/06/19/system-design-estimation</id><content type="html" xml:base="https://reflection.cf/2022/06/19/system-design-estimation.html"><![CDATA[<p>Creating design for a system isn’t helpful unless you can justify why your design is better than others. After creating a design, there will be questions on weather the design fulfills the specified requirements.</p>

<p>According to <strong>Jeff Dean</strong>, Google Senior Fellow, <strong>“back-of-the-envelope calculations are estimates you create using a combination of thought experiments and common performance numbers to get a good feel for which design will meet your requirements.”</strong></p>

<p>A good sense of scalability basics are required to do back-of-the-envelope estimation.</p>

<h2 id="power-of-two">Power of two</h2>
<p>An <strong>ASCII</strong> character uses one byte of memory (8 bits). Given below is data volume unit using power of 2.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Power</th>
      <th style="text-align: center">Approximate Value</th>
      <th style="text-align: center">Full name</th>
      <th style="text-align: center">Short name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">10</td>
      <td style="text-align: center">1 Thousand</td>
      <td style="text-align: center">1 Kilobyte</td>
      <td style="text-align: center">1 KB</td>
    </tr>
    <tr>
      <td style="text-align: center">20</td>
      <td style="text-align: center">1 Million</td>
      <td style="text-align: center">1 Megabyte</td>
      <td style="text-align: center">1 MB</td>
    </tr>
    <tr>
      <td style="text-align: center">30</td>
      <td style="text-align: center">1 Billion</td>
      <td style="text-align: center">1 Gigabyte</td>
      <td style="text-align: center">1 GB</td>
    </tr>
    <tr>
      <td style="text-align: center">40</td>
      <td style="text-align: center">1 Trillion</td>
      <td style="text-align: center">1 Terabyte</td>
      <td style="text-align: center">1 TB</td>
    </tr>
    <tr>
      <td style="text-align: center">50</td>
      <td style="text-align: center">1 Quadrillion</td>
      <td style="text-align: center">1 Petabyte</td>
      <td style="text-align: center">1 PB</td>
    </tr>
  </tbody>
</table>

<h2 id="latency-numbers">Latency numbers</h2>
<p>Latency numbers as revealed by <strong>Dr. Dean</strong> from Google in 2010 may be outdated because of faster and more powerful computers. But, these numbers should still help you to get general idea of fastness and slowness of different computer operations.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Operation name</th>
      <th style="text-align: center">Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">L1 cache reference</td>
      <td style="text-align: center">0.5 ns</td>
    </tr>
    <tr>
      <td style="text-align: center">Branch mispredict</td>
      <td style="text-align: center">5 ns</td>
    </tr>
    <tr>
      <td style="text-align: center">L2 cache reference</td>
      <td style="text-align: center">7 ns</td>
    </tr>
    <tr>
      <td style="text-align: center">Mutex lock/unlock</td>
      <td style="text-align: center">100 ns</td>
    </tr>
    <tr>
      <td style="text-align: center">Main memory reference</td>
      <td style="text-align: center">100 ns</td>
    </tr>
    <tr>
      <td style="text-align: center">Compress 1K bytes with Zippy</td>
      <td style="text-align: center">10,000 ns = 10 μs</td>
    </tr>
    <tr>
      <td style="text-align: center">Send 2K bytes over 1 Gbps network</td>
      <td style="text-align: center">20,000 ns = 20 μs</td>
    </tr>
    <tr>
      <td style="text-align: center">Read 1 MB sequentially from memory</td>
      <td style="text-align: center">250,000 ns = 250 μs</td>
    </tr>
    <tr>
      <td style="text-align: center">Round trip within the same datacenter</td>
      <td style="text-align: center">500,000 ns = 500 μs</td>
    </tr>
    <tr>
      <td style="text-align: center">Disk seek</td>
      <td style="text-align: center">10,000,000 ns = 10 ms</td>
    </tr>
    <tr>
      <td style="text-align: center">Read 1 MB sequentially from the network</td>
      <td style="text-align: center">10,000,000 ns = 10 ms</td>
    </tr>
    <tr>
      <td style="text-align: center">Read 1 MB sequentially from disk</td>
      <td style="text-align: center">30,000,000 ns = 30 ms</td>
    </tr>
    <tr>
      <td style="text-align: center">Send packet CA(California)-&gt;Netherlands-&gt;CA</td>
      <td style="text-align: center">150,000,000 ns = 150 ms</td>
    </tr>
  </tbody>
</table>

<p><strong>ns = nanosecond</strong></p>

<p><strong>μs = microsecond</strong></p>

<p><strong>ms = millisecond</strong></p>

<p><strong>1 ns =</strong> \(10^{-9}\) <strong>seconds</strong></p>

<p><strong>1 μs =</strong> \(10^{-6}\) <strong>seconds = 1,000 ns</strong></p>

<p><strong>1 ms =</strong> \(10^{-3}\) <strong>seconds = 1,000 μs = 1,000,000 ns</strong></p>

<p>Some conclusions from above numbers-</p>
<ul>
  <li>Memory is fast but disk is slow</li>
  <li>Avoid disk seeks if possible</li>
  <li>Simple compression algorithms are fast</li>
  <li>Compress data before sending it over the internet if possible</li>
  <li>Data centers are usually in different regions, and it takes time to send data between them</li>
</ul>

<h2 id="availability-numbers">Availability numbers</h2>
<p>A <strong>service level agreement(SLA)</strong> is commonly used as an agreement between the service provider and their customer. This agreement formally defines the level of uptime your service will deliver. The uptime is measured as percentage and it falls between <strong>99%</strong> and <strong>100%</strong> for most services. Uptime is typically measured in nines, more nines is better. Number of nines correlate to the expected system downtime.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Availability %</th>
      <th style="text-align: center">Downtime per day</th>
      <th style="text-align: center">Downtime per year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">99%</td>
      <td style="text-align: center">14.40 minutes</td>
      <td style="text-align: center">3.65 days</td>
    </tr>
    <tr>
      <td style="text-align: center">99.9%</td>
      <td style="text-align: center">1.44 minutes</td>
      <td style="text-align: center">8.77 hours</td>
    </tr>
    <tr>
      <td style="text-align: center">99.99%</td>
      <td style="text-align: center">8.64 seconds</td>
      <td style="text-align: center">52.60 minutes</td>
    </tr>
    <tr>
      <td style="text-align: center">99.999%</td>
      <td style="text-align: center">864.00 milliseconds</td>
      <td style="text-align: center">5.26 minutes</td>
    </tr>
    <tr>
      <td style="text-align: center">99.9999%</td>
      <td style="text-align: center">86.40 milliseconds</td>
      <td style="text-align: center">31.56 seconds</td>
    </tr>
  </tbody>
</table>

<p>Anything above 5 nines is considered highly available.</p>

<h2 id="example-estimate-twitter-qps-and-storage-requirements">Example: Estimate Twitter QPS and storage requirements</h2>
<p>Following numbers are just to showcase how back-of-the-envelope-estimation works, these are not real numbers from twitter.</p>

<h3 id="assumptions">Assumptions</h3>
<ul>
  <li>300 million monthly active users</li>
  <li>50% of users use twitter daily</li>
  <li>Users post 2 tweets per day on average</li>
  <li>10% of tweets contain media</li>
  <li>Data is stored for 5 years</li>
</ul>

<h3 id="estimations">Estimations</h3>
<p><strong>Query per second(QPS)</strong> estimate:</p>
<ul>
  <li>Daily active users(DAU) = 300 million * 50% = 150 million</li>
  <li>Tweets QPS = 150 million * 2 tweets / 24 hour / 3600 seconds = ~3500</li>
  <li>Peek QPS = 2 * QPS = ~7000</li>
</ul>

<p>We will only estimate media storage here.</p>
<ul>
  <li>Average tweet size:
    <ul>
      <li>tweet_id \(\to\) 64 bytes</li>
      <li>text \(\to\) 140 bytes</li>
      <li>media \(\to\) 1 MB</li>
    </ul>
  </li>
  <li>Media storage: 150 million * 2 * 10% * 1 MB = 30 TB per day</li>
  <li>5-year media storage: 3 TB * 365 * 5 = ~55 PB</li>
</ul>

<h2 id="tips">Tips</h2>
<p>Back-of-the-envelope estiimations don’t need to be extremely accurate, they are just meant to give approximate idea of scale. Few tips are as follows-</p>
<ul>
  <li>Rounding and Approximation wherever necessary for speed calculation, precision isn’t expected at design stage</li>
  <li>Write down assumptions to be referenced later</li>
  <li>Label units to remove ambiguity from numbers and not confuse yourself</li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>This note gives basic idea of how back-of-the-envelope calculations work. You should practice these calculations on all designs you visit. More practice will help you get rough numbers in mind and select or discard ideas when brainstorming new system design.</p>]]></content><author><name>Shubham</name></author><category term="system-design" /><summary type="html"><![CDATA[Creating design for a system isn’t helpful unless you can justify why your design is better than others. After creating a design, there will be questions on weather the design fulfills the specified requirements.]]></summary></entry><entry><title type="html">Bloom Filter</title><link href="https://reflection.cf/2022/05/28/bloom-filter.html" rel="alternate" type="text/html" title="Bloom Filter" /><published>2022-05-28T00:00:00+00:00</published><updated>2022-05-28T00:00:00+00:00</updated><id>https://reflection.cf/2022/05/28/bloom-filter</id><content type="html" xml:base="https://reflection.cf/2022/05/28/bloom-filter.html"><![CDATA[<p>You heard about some cool website from your friends. You visit the website and try creating new account, but get a message, <code class="language-plaintext highlighter-rouge">Username is already taken</code>. You add some random numbers at end, but you still get same error message. This process is frustating, until you find a username that works.</p>

<p>Ever wondered, how they check availability of usernames so fast? when they have millions of registered users.</p>

<p>There are multiple ways to solve this problem -</p>
<ol>
  <li><strong>Linear search</strong> - go through database and compare every username with the username you entered to find if it exists. This will probably take years before you can create a new account.</li>
</ol>

<p><img src="/assets/images/bloom_filter/waiting.jpg" alt="Waiting" /></p>

<ol>
  <li><strong>Binary Search</strong> - store usernames alphabetically and try finding the entered username using binary search. This is better than previous approach, but still requires many steps when you have millions of users.</li>
</ol>

<p><img src="/assets/images/bloom_filter/binary_search.png" alt="Binary Search" /></p>

<ol>
  <li><strong>Trie</strong> - store usernames in a trie and try finding the entered username. This have way better performance than previous 2 approaches, but it requires more memory to store millions of users. Also the overhead of maintaining trie is huge for so many users.</li>
</ol>

<p><img src="/assets/images/bloom_filter/trie.png" alt="Trie" /></p>

<p><strong>Bloom filter</strong> can solve this problem. You need to understand hashing to learn how bloom filter works. A hash function maps some input to a fixed length unique identifier output, this output can be used for identifying input.</p>

<h2 id="what-is-it">What is it?</h2>
<p>A Bloom filter is a space-efficient probabilistic data structure that is used to test if an element is a member of a set. The tradeoff for efficiency is the probabilistic nature of bloom filter, which means there might be some false positives. False positive means, bloom filter may say that a username is already used, even when it’s not.</p>

<h2 id="properties">Properties</h2>
<ul>
  <li>Bloom filter with fixed size can represent a set with very large number of elements</li>
  <li>Adding element never fails, but false positives increase as more elements are added</li>
  <li>Never generates false negatives</li>
  <li>Deleting elements from filter isn’t possible</li>
</ul>

<h2 id="how-it-works">How it works?</h2>
<p>An empty bloom filter is a <strong>bit array</strong> of <strong>n</strong>  bits, all set to zero. We also need <strong>k</strong> hash functions to calculate hash function for a given input. For adding an element to bloom filter we set <strong>k</strong> indices calculated using hash function h<sub>1</sub>(x), h<sub>2</sub>(x), …, h<sub>k</sub>(x) to 1.</p>

<p>Example - If we have a bloom filter with 10 bits and 3 hash functions h<sub>1</sub>, h<sub>2</sub>, h<sub>3</sub>. Initial value for all bits in bloom filter will be 0.</p>

<p><img src="/assets/images/bloom_filter/empty_bloom_filter.excalidraw.png" alt="Empty Bloom Filter" /></p>

<p>We then calculate hash for the word to be added and set the indices returned by hash function to 1.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// word to be added - shubham</span>
<span class="n">h1</span><span class="o">(</span><span class="s">"shubham"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">h2</span><span class="o">(</span><span class="s">"shubham"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">6</span>
<span class="n">h3</span><span class="o">(</span><span class="s">"shubham"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">9</span>
</code></pre></div></div>

<p><img src="/assets/images/bloom_filter/bf1.excalidraw.png" alt="Bloom Filter 1" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// word to be added - alex</span>
<span class="n">h1</span><span class="o">(</span><span class="s">"alex"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">h2</span><span class="o">(</span><span class="s">"alex"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">6</span>
<span class="n">h3</span><span class="o">(</span><span class="s">"alex"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div></div>

<p><img src="/assets/images/bloom_filter/bf2.excalidraw.png" alt="Bloom Filter 2" /></p>

<p>To check if a element is present in bloom filter, we do the same process in reverse. You get back indexes using hash functions &amp; check indexes. If all indexes are set to 1 the word is <strong>probably present</strong>, but if any of these indexes is 0, the word is <strong>definitely not present</strong>.</p>

<h2 id="false-positives">False Positives</h2>

<p>There is a possiblity of 2 words returning same values from hash function. This means we can get false positives where a word wasn’t added to bloom filter.</p>

<p>Assume a word that was not added to bloom filter, but returns hash values which are already set.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// word to be checked - bob</span>
<span class="n">h1</span><span class="o">(</span><span class="s">"bob"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">h2</span><span class="o">(</span><span class="s">"bob"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">6</span>
<span class="n">h3</span><span class="o">(</span><span class="s">"bob"</span><span class="o">)</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">=</span> <span class="mi">9</span>
</code></pre></div></div>

<p><img src="/assets/images/bloom_filter/bf3.excalidraw.png" alt="Bloom Filter 3" /></p>

<p>Here we never added <strong>bob</strong> to the bloom filter, but it is still present in filter. This means we can be <strong>100%</strong> sure if something isn’t available in filter, but not the other way around.</p>

<p>We can control the probability of getting false positives by controlling the size of bloom filter. More bits means fewer false positives. We can also increase the number of hash functions to check more bits and reduce false positives. This also increases latency to add and check elements in bloom filter.</p>

<p>Let <strong>n</strong> be the size of bit array, <strong>k</strong> be the number of hash functions and <strong>n</strong> be the number of elements to be inserted in the filter, then probability of false positives <strong>p</strong> can be calculated as follows:</p>

\[\mathrm{P} = \left( 1-\left[ 1-\frac{1}{n} \right]^{km} \right)^{k}\]

<p>If <strong>m</strong> is max number elements expected to be handled by bloom filter and desired false positive probability is <strong>p</strong>, the the size of bit array <strong>n</strong> can be calcuated as follows:</p>

\[\mathrm{n} = -\frac{mln{P}}{(ln{2})^{2}}\]

<p>If <strong>n</strong> is size of bit array and <strong>m</strong> is number of elements to be inserted then optimum number if hash functions <strong>k</strong> can be calculated as follows:</p>

\[\mathrm{k} = \frac{n}{m}ln{2}\]

<p>Bloom filter are very space efficient, as data items are not stored. Using bit array allows hash collision, without hash collision, it would not be compact.</p>

<h2 id="supported-operations">Supported Operations</h2>
<ul>
  <li><strong>insert(x)</strong> - insert an element to bloom filter</li>
  <li><strong>lookup(x)</strong> - check whether an element is already present in bloom filter with a probability of false positive</li>
</ul>

<p><span style="color: red;">
Note: Elements cannot be deleted from bloom filter.
</span></p>

<h2 id="choosing-hash-function">Choosing Hash Function</h2>
<p>All hash functions used in bloom filter should be independent from each other and uniformly distributed. These hash functions should be fast. Getting hash is most frequently used operation in bloom filters. Cryptographic hash functions provide stability but are expensive to calculate. Increasing hash functions slows bloom filter. Non-cryptographic hash functions do not provide guarantee but do provide major performance improvements.</p>

<p>Fast simple non cryptographic hashes which are independent of each other include <a href="https://en.wikipedia.org/wiki/MurmurHash">MurmurHash</a>, <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">Fowler–Noll–Vo hash function</a>, <a href="https://en.wikipedia.org/wiki/Jenkins_hash_function">Jenkins hash function</a>.</p>

<h2 id="applications">Applications</h2>
<p>Bloom filters should be used when:</p>
<ul>
  <li>Data to be searched is large</li>
  <li>Memory available on the system is limited/low</li>
</ul>

<p>Some real world usage:</p>
<ul>
  <li>Detect weak passwords</li>
  <li>Google Chrome Safe Browsing(URL bloom filter)</li>
  <li>Antivirus(Content bloom filter)</li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>This note covers basics of bloom filter and when to use them. I recommend reading more about non-cryptographic hash functions and how to use them.</p>]]></content><author><name>Shubham</name></author><category term="data-structure" /><summary type="html"><![CDATA[You heard about some cool website from your friends. You visit the website and try creating new account, but get a message, Username is already taken. You add some random numbers at end, but you still get same error message. This process is frustating, until you find a username that works.]]></summary></entry><entry><title type="html">Kb(1024) or Kb(1000) Dilemma</title><link href="https://reflection.cf/2022/05/27/kb-dilemma.html" rel="alternate" type="text/html" title="Kb(1024) or Kb(1000) Dilemma" /><published>2022-05-27T00:00:00+00:00</published><updated>2022-05-27T00:00:00+00:00</updated><id>https://reflection.cf/2022/05/27/kb-dilemma</id><content type="html" xml:base="https://reflection.cf/2022/05/27/kb-dilemma.html"><![CDATA[<p>Every engineer with computer science major stumbles on this question atleast once, weather to use <strong>1000 bytes</strong> or <strong>1024 bytes</strong> as <strong>1 kilobyte</strong> equivalent.</p>

<p>The value of <strong>1 kilobyte</strong> depends on the context as follows -</p>
<ul>
  <li><strong>Disk Storage</strong> always refers to base 2 numbers, where <strong>k = 1024</strong> or \(2^{10}\).</li>
  <li><strong>Transmission Speeds</strong> always refers to SI units or base 10 numbers, where <strong>k = 1000</strong> or \(10^{3}\).</li>
</ul>

<p><strong>Note: 1 byte = 8 bits</strong></p>

<h2 id="capitalization">Capitalization</h2>
<p>Capital letters have <strong>nothing</strong> to do with the definition. Kb, kB, kb or KB have same meaning, depending on context. There is no shortcut rule to reveal the meaning of kilo by capitalisation or not.</p>

<h2 id="file-size-memory-size-and-hard-disc-size">File size, memory size, and hard disc size</h2>
<p>A kilobyte file is 1024 bytes in size. It is not 1000 bytes in size.
A kilogram of apples is 1000 grams heavy. It is not 1024 grams heavy.
The meaning of prefix is clear from the context.</p>

<p>When we talk about disk storage, file size and memory size, kilobyte means 1024 bytes.</p>

<h2 id="transmission-speeds">Transmission Speeds</h2>
<p>Transmission speeds are described in kilobits per second (kbps). Now, that is not disk storage, file size, or memory size.</p>

<p>When we talk about transmission speeds, kilobits means 1000 bits.</p>

<h2 id="questions">Questions</h2>
<p><strong>Q1:</strong> Calculate how many bytes there are in three kilobytes of disc storage?</p>

<p><strong>Answer:</strong> The question clearly defines the context as disc storage. Therefore, kilobyte should be considered 1024 bytes. Correct response should be 3 * 1024.</p>

<p><strong>Q2:</strong> Calculate how many bits are being transmitted per second for a network described as three Mbps.</p>

<p><strong>Answer:</strong> The question clearly defines the context as network transmission. Therefore, meaning of 3 Mbps(megabits per second) should be clear. It is 1,000,000 bits per second. Correct response should be 3 * 1,000,000.</p>

<p><strong>Q3:</strong> How long would it take to transmit a 2 KB(kilobyte) file at 3 Mbps(megabits per second)?</p>

<p><strong>Answer:</strong> The question would involve both of the values 1000 and 1024. Correct response is \(\frac{2 * 1024 * 8}{3 * 1000 * 1000}\).</p>]]></content><author><name>Shubham</name></author><category term="storage" /><category term="network" /><category term="units" /><summary type="html"><![CDATA[Every engineer with computer science major stumbles on this question atleast once, weather to use 1000 bytes or 1024 bytes as 1 kilobyte equivalent.]]></summary></entry><entry><title type="html">Java 11 Fundamentals: Collections</title><link href="https://reflection.cf/2022/05/25/java-11-collections.html" rel="alternate" type="text/html" title="Java 11 Fundamentals: Collections" /><published>2022-05-25T00:00:00+00:00</published><updated>2022-05-25T00:00:00+00:00</updated><id>https://reflection.cf/2022/05/25/java-11-collections</id><content type="html" xml:base="https://reflection.cf/2022/05/25/java-11-collections.html"><![CDATA[<p>Every application requires wide variety of data structures based on your use case. Implementing every basic data structures yourself is error prone, it’s hard to get everything right. This is one of the reasons why java provides <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Collection.html">collection</a> with jdk.</p>

<h2 id="the-array-problem">The Array Problem</h2>
<p>Some may argue why not use array everywhere? 
Yes, you can but is it worth it?</p>

<p>Given below are some problems associated with array:</p>
<ul>
  <li>Increasing size - Adding new elements in already filled array requires creating new array and copying values from old one. Old array is left for garbage collection, resulting in memory wastage.</li>
  <li>Homogeneous object storage - You can only store objects of same type in an array.</li>
  <li>Deletion &amp; Insertion - You cannot easily insert or delete elements at middle of the array.</li>
</ul>

<p>Apart from the issues above, the complexity is also very bad for frequently used operations in array.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Array Operation</th>
      <th style="text-align: center">Real Time Complexity</th>
      <th style="text-align: center">Assumed Time Complexity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">Access i-th element</td>
      <td style="text-align: center">O(\(\sqrt{N}\))</td>
      <td style="text-align: center">O(1)</td>
    </tr>
    <tr>
      <td style="text-align: center">Traverse all elements</td>
      <td style="text-align: center">O(N + \(\sqrt{N}\))</td>
      <td style="text-align: center">O(N)</td>
    </tr>
    <tr>
      <td style="text-align: center">Override element at i-th index</td>
      <td style="text-align: center">O(\(\sqrt{N}\))</td>
      <td style="text-align: center">O(1)</td>
    </tr>
    <tr>
      <td style="text-align: center">Insert element E</td>
      <td style="text-align: center">O(N + \(\sqrt{N}\))</td>
      <td style="text-align: center">O(N)</td>
    </tr>
    <tr>
      <td style="text-align: center">Delete element E</td>
      <td style="text-align: center">O(N + \(\sqrt{N}\))</td>
      <td style="text-align: center">O(N)</td>
    </tr>
  </tbody>
</table>

<h2 id="collection-design">Collection Design</h2>
<p><img src="/assets/images/java-11-collections/collections.excalidraw.png" alt="Collections" /></p>

<h2 id="choosing-collection">Choosing Collection</h2>
<p><img src="/assets/images/java-11-collections/which_collection.excalidraw.png" alt="Which Collection" /></p>

<h2 id="collection-behaviors">Collection Behaviors</h2>
<p>Collection interface extends iterable interface which allows creating iterator object. Iterator objects can be used to loop over collections.</p>

<p><img src="/assets/images/java-11-collections/iterable.excalidraw.png" alt="Iterable" /></p>

<p>Sample code snippet showing iterator usage provided below:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Make a collection</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">movies</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
<span class="n">movies</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Matrix"</span><span class="o">);</span>
<span class="n">movies</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Spiderman"</span><span class="o">);</span>
<span class="n">movies</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Batman"</span><span class="o">);</span>

<span class="c1">// Get iterator</span>
<span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">movies</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>

<span class="c1">// Looping through collection</span>
<span class="k">while</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
	<span class="c1">// process collection elements</span>
	<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
<span class="o">}</span>

</code></pre></div></div>

<h2 id="lists">Lists</h2>
<p>Lists are collection of elements having defined iteration order where each element has an index.</p>

<h3 id="arraylist">ArrayList</h3>

<p>Arraylist uses dynamic array for storing objects. It is good for general purpose implementation and can be used as default implementation in most cases. Arraylist is also CPU cache sympathetic because of the way it is stored in-memory. Initial ArrayList starts with default capacity and creates a new array with double the current capacity once it is full while copies elements from old array. ArrayList grows using doubling strategy as shown in figure below.</p>

<p><img src="/assets/images/java-11-collections/arraylist_doubling.excalidraw.png" alt="ArrayList Doubling" /></p>

<h3 id="linkedlist">LinkedList</h3>

<p>LinkedList has same implementation as doubly linked list and uses pointers to traverse across the data structure. Use linkedlist when there are very frequent addition/removal of elements at start. For most cases linkedlists will have worse performance than arraylist.</p>

<p><img src="/assets/images/java-11-collections/doubly-linked-list.excalidraw.png" alt="Doubly Linked List" /></p>

<h3 id="performance-comparison">Performance Comparison</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">get</th>
      <th style="text-align: center">add</th>
      <th style="text-align: center">contains</th>
      <th style="text-align: center">next</th>
      <th style="text-align: center">remove</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">ArrayList</td>
      <td style="text-align: center">O(1)</td>
      <td style="text-align: center">O(N), Ω(1)</td>
      <td style="text-align: center">O(N)</td>
      <td style="text-align: center">O(1)</td>
      <td style="text-align: center">O(N)</td>
    </tr>
    <tr>
      <td style="text-align: center">LinkedList</td>
      <td style="text-align: center">O(N)</td>
      <td style="text-align: center">O(1)</td>
      <td style="text-align: center">O(N)</td>
      <td style="text-align: center">O(1)</td>
      <td style="text-align: center">O(N)</td>
    </tr>
  </tbody>
</table>

<h2 id="maps">Maps</h2>
<p>Maps are collections of pairs, they have keys and values. Dictionary is a good example of map, where you find meaning of word by using word as key. In java maps, keys are unique, and the uniqueness is defined by keys equals/hashcode method. Use maps over other data structures when doing frequent lookups.</p>

<h3 id="hashmap">HashMap</h3>

<p>HashMap is a good general purpose implementation for most usecases. Hashmap uses a <code class="language-plaintext highlighter-rouge">.hashcode()</code> function to generate hash values for a key. The generated hashcodes are stored in an array of buckets. Buckets are linked lists to accomodate for hash collisions. Elements are stored in <code class="language-plaintext highlighter-rouge">hash % bucket_count</code> bucket.  Buckets can also be trees in some cases. Number of buckets can increase with more elements and a rehash of all keys happens during this expansion of hashmaps.</p>

<p><img src="/assets/images/java-11-collections/hashmap.excalidraw.png" alt="Hashmap" /></p>

<h3 id="treemap">TreeMap</h3>

<p>TreeMap defines sort order and adds functionality. You can look at subsections of map based on sort order. This can perform better for some specific usecases. Underlying implementation of TreeMap is a red/black tree(a balanced binary tree). Elements with lower value are stored on left branch of these trees &amp; higher values are stored in right branch. The tree gets re-balanced, so it never goes longer than <strong>\(\log_{2}N\)</strong> in terms of depth, where N is the number of elements. In general treemaps are slower than hashmaps, because of too many pointer operations, but treemap provides the navigation and sorting functionality which is missing in hashmaps.</p>

<p>Following example shows world population stored in treemap, it is easy to find cities with population in specific range, max population city, min population city, etc.</p>

<p><img src="/assets/images/java-11-collections/treemap.excalidraw.png" alt="Treemap" /></p>

<p>JDK also has other implementations of Map as well like EnumMap, LinkedHashMap &amp; IdentityHashMap. Read official docs to know more in-depth.</p>

<h3 id="performance-comparison-1">Performance Comparison</h3>
<p>|         |    put     |    get     | containsKey |     next      |
|:——-:|:———-:|:———-:|:———–:|:————-:|
| HashMap | O(N), Ω(1) | O(N), Ω(1) | O(N), Ω(1)  | O(Capacity/N) |
| TreeMap | O(log(N))  | O(log(N))  |  O(log(N))  |   O(log(N))   |</p>

<h2 id="sets">Sets</h2>

<p>Sets are collections with uniqueness as fundamental property. When <code class="language-plaintext highlighter-rouge">equals</code> method on two objects return same value, they are considered equal. Sets have no two objects within them with same equals value. Implementation of <code class="language-plaintext highlighter-rouge">equals</code> may require implementing <code class="language-plaintext highlighter-rouge">hashcode</code> or <code class="language-plaintext highlighter-rouge">comparator</code>.</p>

<h3 id="hashcode--equals-contract">HashCode / Equals Contract</h3>

<p>Many APIs within JDK have contracts between them.  Contracts are assumptions being made by any class within JDK and there are obligations on your code that you need to meet in order for that class functionality to work.</p>

<p>Since HashMap/HashSet depend on <code class="language-plaintext highlighter-rouge">hashCode</code> to find slots in bucket and <code class="language-plaintext highlighter-rouge">equals</code> to compare if two values is equal. If a developer doesn’t properly define this functions there is a possibility of you getting in a situation with duplicate objects within set or same object present in different buckets in hashmap. If there are 2 objects <code class="language-plaintext highlighter-rouge">object1</code> and <code class="language-plaintext highlighter-rouge">object2</code>, the hashcode/equals contract is as follows:</p>

<p><code class="language-plaintext highlighter-rouge">object1.equals(object2)</code> \(\implies\) <code class="language-plaintext highlighter-rouge">object1.hashCode() == object2.hashCode()</code></p>

<p>This is one way implication, 2 different object can have same hashCode, but same objects should always have same hashCode. Violating this contract will break the functionality of your class.</p>

<p>This contract is important because java has 2 types of equality - reference based and value based. Reference based just needs to inherit equals from Object. Value based requires a custom equals method. For value based equality proper equals &amp; hashcode implementation should be defined.</p>

<p>Java 8+ have <code class="language-plaintext highlighter-rouge">hashCode()</code> for almost all primitives. Modern IDEs can auto-generate hashCode imeplementation for you. Java 7+ also has <code class="language-plaintext highlighter-rouge">Objects.hash()</code> that generates hashcode by combining individuals fields inside an object, but this function has high performance overhead, so, avoid using it.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Arrays</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>

<span class="c1">// Primitives (Java 8+)</span>
<span class="nc">Long</span><span class="o">.</span><span class="na">hashCode</span><span class="o">(</span><span class="n">longValue</span><span class="o">);</span>

<span class="c1">// Old Primitives (&lt; Java 8)</span>
<span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">l</span> <span class="o">^</span> <span class="o">(</span><span class="n">l</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">32</span><span class="o">))</span> <span class="c1">// long l</span>
<span class="nc">Float</span><span class="o">.</span><span class="na">floatToIntBits</span><span class="o">(</span><span class="n">f</span><span class="o">);</span> <span class="c1">// float f</span>
</code></pre></div></div>

<h3 id="hashset">HashSet</h3>

<p>HashSet is based upon HashMap and uses the HashMap implementation. HashSet is a HashMap with bucket size of 1. HashSet is good for general purpose and should be used by default.</p>

<h3 id="treeset">TreeSet</h3>

<p>TreeSet is based upon TreeMap and uses the TreeMap implementation(red/black binary tree), it provides features for searching and navigation within set. TreeSet is TreeMap without any duplicate nodes in tree.</p>

<h2 id="streams">Streams</h2>

<p><a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/stream/package-summary.html">Streams</a> are powerful new abstractions introduced in Java 8. Stream class provides functional-style operations on stream of elements, such as map-reduce transformations on collections. I would recommend using streams to do any kind of transformation in collections instead of traditional loops. Using stream improves readability and reduces boilerplate code.</p>

<p>Example code snippet to show stream usage:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// find sum of weights of red widgets</span>
<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">widgets</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">getColor</span><span class="o">()</span> <span class="o">==</span> <span class="no">RED</span><span class="o">)</span>
	<span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">b</span> <span class="o">-&gt;</span> <span class="n">b</span><span class="o">.</span><span class="na">getWeight</span><span class="o">())</span>
	<span class="o">.</span><span class="na">sum</span><span class="o">();</span>
</code></pre></div></div>

<p>Streams are usually used with collectors. I would recommend reading <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/stream/Collectors.html">Collectors</a> documentation for examples.</p>

<p>Example code snippet to show collector usage:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Accumulate names into a List</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">people</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Person:</span><span class="o">:</span><span class="n">getName</span><span class="o">)</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</code></pre></div></div>

<h2 id="factory-methods">Factory Methods</h2>
<p><a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Collections.html">Collections</a> class provides many utility methods which can help prevent redundant implementation of commonly used functionality like, find min &amp; max from list, create empty set, etc. Most factory methods are optimized for performance, as they have generic implementation details.</p>

<p>Having empty collections can be useful when you want to pass an empty collection as argument, or you want to return an empty collection from a function.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Empty Collections</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">();</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">emptyMap</span><span class="o">();</span>
<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">emptySet</span><span class="o">();</span>
</code></pre></div></div>

<p>Singletons are helpful when you want to create collections with single value.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Singletons</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="s">"one"</span><span class="o">);</span>
<span class="nc">Mao</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonMap</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"one"</span><span class="o">);</span>
<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singleton</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</code></pre></div></div>

<p>Collection factories allow creating collections without a lot of boilerplate code.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"India"</span><span class="o">,</span> <span class="s">"USA"</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="nc">Map</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Shubham"</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="s">"Alex"</span><span class="o">,</span> <span class="mi">5000</span><span class="o">);</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entries</span> <span class="o">=</span> <span class="nc">Map</span><span class="o">.</span><span class="na">ofEntries</span><span class="o">(</span>
	<span class="nc">Map</span><span class="o">.</span><span class="na">entry</span><span class="o">(</span><span class="s">"Shubham"</span><span class="o">,</span> <span class="mi">1000</span><span class="o">),</span>
	<span class="nc">Map</span><span class="o">.</span><span class="na">entry</span><span class="o">(</span><span class="s">"Alex"</span><span class="o">,</span> <span class="mi">5000</span><span class="o">)</span>
<span class="o">);</span>
</code></pre></div></div>

<p>Java 10 introduced immutable copies approach as an alternative to immutable factory methods.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Modifying names does not modify immutableNames</span>
<span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
<span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Shubham"</span><span class="o">);</span>
<span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Alex"</span><span class="o">);</span>

<span class="c1">// add/remove/updated prohibited</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">immutableNames</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">names</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">budget</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">budget</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Shubham"</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
<span class="n">budget</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Alex"</span><span class="o">,</span> <span class="mi">5000</span><span class="o">);</span>

<span class="c1">// add/remove/updated prohibited</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">immutableBudget</span> <span class="o">=</span> <span class="nc">Map</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">budget</span><span class="o">);</span>
</code></pre></div></div>

<p>Java 9 introduced unmodifiable views.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Modifying names is the only way to modify namesView</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Shubham"</span><span class="o">);</span>
<span class="n">names</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Alex"</span><span class="o">);</span>

<span class="c1">// add/remove/updated prohibited directly, still possible through names</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">namesView</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">names</span><span class="o">);</span>

<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">budget</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="n">budget</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Shubham"</span><span class="o">,</span> <span class="mi">1000</span><span class="o">);</span>
<span class="n">budget</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Alex"</span><span class="o">,</span> <span class="mi">5000</span><span class="o">);</span>

<span class="c1">// add/remove/updated prohibited, still possible through budget</span>
<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">budgetView</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableMap</span><span class="o">(</span><span class="n">budget</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>
<p>This article should help you choose correct collection for your usecase and identify tradeoff between different collections. Don’t forget to go through official docs for <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Collection.html">Collection</a>, <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/List.html">List</a>, <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Map.html">Map</a>, <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Set.html">Set</a> and <a href="https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Queue.html">Queue</a>.</p>]]></content><author><name>Shubham</name></author><category term="java" /><category term="collections" /><summary type="html"><![CDATA[Every application requires wide variety of data structures based on your use case. Implementing every basic data structures yourself is error prone, it’s hard to get everything right. This is one of the reasons why java provides collection with jdk.]]></summary></entry><entry><title type="html">Github Contribution Workflow</title><link href="https://reflection.cf/2022/05/24/git-contribution-workflow.html" rel="alternate" type="text/html" title="Github Contribution Workflow" /><published>2022-05-24T00:00:00+00:00</published><updated>2022-05-24T00:00:00+00:00</updated><id>https://reflection.cf/2022/05/24/git-contribution-workflow</id><content type="html" xml:base="https://reflection.cf/2022/05/24/git-contribution-workflow.html"><![CDATA[<p>This note covers the workflow I use to contribute to open-source projects. I am using <code class="language-plaintext highlighter-rouge">github.com</code> for simplicity, but basic concepts are the same for all git-based VCS.</p>

<h2 id="finding-interesting-projects">Finding Interesting Projects</h2>
<p>When starting your open source contribution journey, the first step is to find a project that interests you. Many sites index good issues for beginners. I am listing down a few sites which I felt comfortable using when getting started.</p>
<ul>
  <li><a href="https://goodfirstissues.com/index.html">Good First Issues</a></li>
  <li><a href="https://up-for-grabs.net/#/">Up For Grabs (up-for-grabs.net)</a></li>
</ul>

<h2 id="forking-repository">Forking Repository</h2>
<p>Once, you have figured out which project you want to contribute to, you can create a fork. A fork in github is an exact copy of some existing repository but under your username or org. You have full access to the forked repository, consider it your copy of code. You are going to add stuff here.
<img src="/assets/images/gh-workflow/fork.excalidraw.png" alt="Fork Repo" /></p>

<h2 id="developing-in-forked-repository">Developing in Forked Repository</h2>
<p>Before you can start contributing to any project, you need to first clone the forked repository in your development machine. Cloning will bring a copy of your forked repository to your local system. Once you have cloned the forked repository, you can start doing changes.  In the figure below, we start by creating <code class="language-plaintext highlighter-rouge">file1</code> in step 3 and committing them to the local branch <code class="language-plaintext highlighter-rouge">feature-branch</code>. After committing targeted changes in the local branch, you can push this local branch to a remote forked repository. After reviewing code changes, you can either merge these changes to the <code class="language-plaintext highlighter-rouge">main</code> branch or create a pull request against the <code class="language-plaintext highlighter-rouge">upstream</code> source project. The following figure shows the workflow used to do changes in a forked repo.
<img src="/assets/images/gh-workflow/develop-in-fork.excalidraw.png" alt="Develop in Fork" /></p>

<h3 id="staging-changes">Staging changes</h3>
<p>Any file changes(including creation &amp; deletion) stay in the working area by default. Git also provides us with a preparation area called staging. Whatever is present in staging gets saved permanently to <code class="language-plaintext highlighter-rouge">.git</code> when we commit. The following figure shows how the file changes move when using git commands.
<img src="/assets/images/gh-workflow/staging-process.excalidraw.png" alt="Staging Process" /></p>

<h2 id="pull-requests">Pull Requests</h2>
<p>Pull requests are not part of git, but rather part of git-based websites. Pull requests provide easy to use interface to review changes done by contributors and approve, request changes or merge them in your repo. A pull request has 2 parts to it, <code class="language-plaintext highlighter-rouge">base(target)</code> refers to the place where you want to contribute, and <code class="language-plaintext highlighter-rouge">compare(source)</code> refers to the place from where the changes should be picked for contribution. Both <code class="language-plaintext highlighter-rouge">base</code> and <code class="language-plaintext highlighter-rouge">compare</code> can refer to different repo and branch. The following figure shows how pull requests help maintainers merge changes to their repositories.
<img src="/assets/images/gh-workflow/pull-request.excalidraw.png" alt="Pull Request" /></p>

<h2 id="sync-fork-repository">Sync Fork Repository</h2>
<p>Usually, any open source project has a very high commit frequency, as there are so many contributors who keep on adding stuff on the go. This also means, your fork is going to go out-of-sync/outdated very frequently. Thus, we need to keep <code class="language-plaintext highlighter-rouge">main</code> from our fork repository in sync with <code class="language-plaintext highlighter-rouge">main</code> from the source project. This can be done using the concept of upstream. Your local git repository has a table of remote URLs, this can be viewed using <code class="language-plaintext highlighter-rouge">git remote -v</code>. You can configure your local repository to have an <code class="language-plaintext highlighter-rouge">upstream</code> remote URL referring to the source project repo. You always pull changes from <code class="language-plaintext highlighter-rouge">upstream: main</code> and push them to <code class="language-plaintext highlighter-rouge">origin: main</code>.
<img src="/assets/images/gh-workflow/sync-fork.excalidraw.png" alt="Sync Fork" /></p>

<h2 id="important-tips">Important Tips</h2>
<ul>
  <li>Avoid changes to <code class="language-plaintext highlighter-rouge">main</code> branches, if you commit something in main and it diverges from <code class="language-plaintext highlighter-rouge">upstream: main</code>, it will become very difficult to reconcile changes</li>
  <li>Always create a new branch from <code class="language-plaintext highlighter-rouge">main</code> when working on a new feature</li>
  <li>A fork can be created under any <code class="language-plaintext highlighter-rouge">user</code> or <code class="language-plaintext highlighter-rouge">org</code>, you can have a fork under org to share across the team</li>
  <li>As long as your <code class="language-plaintext highlighter-rouge">.git</code> folder is intact, you can recover any changes you lose from the working directory</li>
  <li>Pull requests are not essential, but help the maintainer when reviewing changes</li>
</ul>

<h2 id="conclusion">Conclusion</h2>
<p>This note only covers the bare minimum required to start contributing to git projects. Additional reading is recommended to understand git fundamentals.</p>

<h2 id="cheatsheet">Cheatsheet</h2>
<p><a href="https://books.goalkicker.com/GitBook/">Free Git Book (goalkicker.com)</a></p>]]></content><author><name>Shubham</name></author><category term="vcs" /><summary type="html"><![CDATA[This note covers the workflow I use to contribute to open-source projects. I am using github.com for simplicity, but basic concepts are the same for all git-based VCS.]]></summary></entry></feed>